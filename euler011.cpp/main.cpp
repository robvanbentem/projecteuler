#include <stdio.h>

int get_val(char grid[], int pos, int inc){
  int sum = 1, cpos, x;
  for(x = 0; x < 4; x++){
    cpos = pos + x*inc;
    if(cpos > 20*40) return 0;
    sum *= ((grid[cpos] - '0') * 10 + grid[cpos+1] - '0');
  }

  return sum;
}

int main() {
  int n, c, max = 0;
  char grid[] = "08022297381500400075040507785212507791084949994017811857608717409843694804566200814931735579142993714067538830034913366552709523046011426924685601325671370236912231167151676389419236542240402866331380244732609903450244753353783684203517125032988128642367102638406759547066183864706726206802621220956394396308409166499421245558056673992697177878968314883489637221362309750076442045351400613397343133957817532822753167159403800462161409535692163905429635314755588824001754243629855786560048357189070544443744602158515417581980816805944769287392138652177704895540045208839735991607975732162626793327986688366887576220720346336746551232639353690442167338253911249472180846293240627636206936417230238834629969826759857404361620733529783190017431497148868116235705540170547183515469169233486143520189196748";

  for(n = 0; n < 20*40; n+=2){
    // horizontal, limit to first 17 columns
    if(n%40<34 && (c = get_val(grid, n, 2)) > max) max = c;
    // vertical, limit to first 17 rows
    if(n<34*40 && (c = get_val(grid, n, 40)) > max) max = c;
    // diagonal right, limit to first 17 columns (bound check will take care of row overflow)
    if(n%40<34 && (c = get_val(grid, n, 42)) > max) max = c;
    // diagonal left, limit to first 17 rows and column > 3
    if(n<34*40 && n%40>=6 && (c = get_val(grid, n, 38)) > max) max = c;
  }

  printf("euler 11 solution: %i\n", max);
}
